//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.42
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by xsd, Version=2.0.50727.42.
// 
using System;
using System.Collections.ObjectModel;
using System.Xml.Serialization;

using BerkeleyDb;

namespace MySpace.DataRelay.RelayComponent.Bdb
{
    /// <remarks/>
    //[System.SerializableAttribute()]
    //[System.ComponentModel.DesignerCategoryAttribute("code")]
    //[System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://myspace.com/EnvironmentConfig.xsd")]
    //[System.Xml.Serialization.XmlRootAttribute(Namespace = "http://myspace.com/EnvironmentConfig.xsd", IsNullable = true)]
    [XmlRoot("EnvironmentConfig", Namespace = "http://myspace.com/EnvironmentConfig.xsd")]
    public class EnvironmentConfig
    {

        private EnvCacheSize cacheSize;
        private EnvCreateFlags createFlagsField = EnvCreateFlags.None;
        private string errorPrefixField = "BDB";
        private string homeDirectoryField = @"c:\tmp\BerkeleyDb";
        private Env.OpenFlags openFlagsField =
            Env.OpenFlags.Create |      //Cause Berkeley DB subsystems to create any underlying files

            //Flags to ensure concurent access
            Env.OpenFlags.InitMPool |   //Initialize the shared memory buffer pool subsystem
            Env.OpenFlags.InitCDB;      //Provides multiple reader/single writer access

        //Applications that need recoverability. (These flags cannot go together with InitCDB flag, but InitMPool can be used)
        //Env.OpenFlags.InitLock |    //Initialize the locking subsystem (when multiple processes or threads are going to be reading and writing)
        //Env.OpenFlags.InitLog |     //Initialize the logging subsystem (when recovery is necessary)
        //Env.OpenFlags.InitTxn |     //Initialize the transaction subsystem (when recovery and atomicity of multiple operations are important) requires DB_INIT_LOG flag
        //Env.OpenFlags.Recover;      //Run normal recovery on this environment before opening it for normal use (requires DB_CREATE)
        //Env.OpenFlags.RecoverFatal;//Run catastrophic recovery on this environment before opening it for normal use (requires DB_CREATE)

        //Other Flags:
        //Env.OpenFlags.JoinEnv |     //Join an existing environment
        //Env.OpenFlags.InitRep |     //Initialize the replication subsystem (requires DB_INIT_TXN and DB_INIT_LOCK flags also be configured)
        //Env.OpenFlags.LockDown |    //Lock shared Berkeley DB environment files and memory-mapped databases into memory
        //Env.OpenFlags.Private |     //Specify that the environment will only be accessed by a single process (although that process may be multithreaded)
        //Env.OpenFlags.SystemMem |   //Allocate memory from system shared memory instead of from memory backed by the filesystem
        //Env.OpenFlags.ThreadSafe |  //Evn handle can be concurrently usable by multiple threads
        private EnvOpenFlagCollection envOpenFlagCollection;
        private bool openFlagsInitialized = false;
        private string tempDirectoryField = @"c:\tmp";
        private DatabaseConfigs databaseConfigs;

        private void InitOpenFlags()
        {
            if (this.envOpenFlagCollection == null)
            {
                return;
            }
            foreach (EnvironmentOpenFlags flag in this.envOpenFlagCollection)
            {
                switch (flag)
                {
                    case EnvironmentOpenFlags.Create:
                        this.openFlagsField = this.openFlagsField | Env.OpenFlags.Create;
                        break;
                    case EnvironmentOpenFlags.InitCDB:
                        this.openFlagsField = this.openFlagsField | Env.OpenFlags.InitCDB;
                        break;
                    case EnvironmentOpenFlags.InitLock:
                        this.openFlagsField = this.openFlagsField | Env.OpenFlags.InitLock;
                        break;
                    case EnvironmentOpenFlags.InitLog:
                        this.openFlagsField = this.openFlagsField | Env.OpenFlags.InitLog;
                        break;
                    case EnvironmentOpenFlags.InitMPool:
                        this.openFlagsField = this.openFlagsField | Env.OpenFlags.InitMPool;
                        break;
                    case EnvironmentOpenFlags.InitRep:
                        this.openFlagsField = this.openFlagsField | Env.OpenFlags.InitRep;
                        break;
                    case EnvironmentOpenFlags.InitTxn:
                        this.openFlagsField = this.openFlagsField | Env.OpenFlags.InitTxn;
                        break;
                    case EnvironmentOpenFlags.JoinEnv:
                        this.openFlagsField = this.openFlagsField | Env.OpenFlags.JoinEnv;
                        break;
                    case EnvironmentOpenFlags.LockDown:
                        this.openFlagsField = this.openFlagsField | Env.OpenFlags.LockDown;
                        break;
                    case EnvironmentOpenFlags.None:
                        this.openFlagsField = this.openFlagsField | Env.OpenFlags.None;
                        break;
                    case EnvironmentOpenFlags.Private:
                        this.openFlagsField = this.openFlagsField | Env.OpenFlags.Private;
                        break;
                    case EnvironmentOpenFlags.Recover:
                        this.openFlagsField = this.openFlagsField | Env.OpenFlags.Recover;
                        break;
                    case EnvironmentOpenFlags.RecoverFatal:
                        this.openFlagsField = this.openFlagsField | Env.OpenFlags.RecoverFatal;
                        break;
                    case EnvironmentOpenFlags.SystemMem:
                        this.openFlagsField = this.openFlagsField | Env.OpenFlags.SystemMem;
                        break;
                    case EnvironmentOpenFlags.ThreadSafe:
                        this.openFlagsField = this.openFlagsField | Env.OpenFlags.ThreadSafe;
                        break;
                    case EnvironmentOpenFlags.UseEnviron:
                        this.openFlagsField = this.openFlagsField | Env.OpenFlags.UseEnviron;
                        break;
                    case EnvironmentOpenFlags.UseEnvironRoot:
                        this.openFlagsField = this.openFlagsField | Env.OpenFlags.UseEnvironRoot;
                        break;
                    default:
                        throw new ApplicationException("Unknown Env.OpenFlag '" + flag + "'");
                }
            }

        }

        public EnvCacheSize CacheSize
        {
            get
            {
                return this.cacheSize;
            }
            set
            {
                cacheSize = value;
            }
        }

        [XmlIgnore]
        public EnvCreateFlags CreateFlags
        {
            get
            {
                return this.createFlagsField;
            }
            set
            {
                this.createFlagsField = value;
            }
        }

        public string ErrorPrefix
        {
            get
            {
                return this.errorPrefixField;
            }
            set
            {
                this.errorPrefixField = value;
            }
        }

        public string HomeDirectory
        {
            get
            {
                return this.homeDirectoryField;
            }
            set
            {
                this.homeDirectoryField = value;
            }
        }

        [XmlIgnore]
        public Env.OpenFlags OpenFlags
        {
            get
            {
                if (!openFlagsInitialized)
                {
                    InitOpenFlags();
                    openFlagsInitialized = true;
                }
                return this.openFlagsField;
            }
            set
            {
                this.openFlagsField = value;
            }
        }

        [XmlArray("OpenFlags")]
        [XmlArrayItem("OpenFlag")]
        public EnvOpenFlagCollection EnvOpenFlagCollection
        {
            get
            {
                return this.envOpenFlagCollection;
            }
            set
            {
                this.envOpenFlagCollection = value;
            }
        }

        public string TempDirectory
        {
            get
            {
                return this.tempDirectoryField;
            }
            set
            {
                this.tempDirectoryField = value;
            }
        }

        [XmlArray("DatabaseConfigs")]
        [XmlArrayItem("DatabaseConfig", Namespace="http://myspace.com/DatabaseConfig.xsd")]
        public DatabaseConfigs DatabaseConfigs
        {
            get
            {
                return this.databaseConfigs;
            }
            set
            {
                this.databaseConfigs = value;
            }
        }
    }

    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://myspace.com/EnvironmentConfig.xsd")]
    public class EnvCacheSize
    {
        private int gigaBytes;
        private int bytes;
        private int numberCaches;

        public int GigaBytes { get { return gigaBytes; } set { gigaBytes = value; } }
        public int Bytes { get { return bytes; } set { bytes = value; } }
        public int NumberCaches { get { return numberCaches; } set { numberCaches = value; } }
    }


    //public class EnvCreateFlagCollection : KeyedCollection<string, EnvironmentCreateFlags>
    //{
    //    protected override string GetKeyForItem(EnvironmentCreateFlags item)
    //    {
    //        return item.ToString();
    //    }

    //    public string GetGroupNameForId(string id)
    //    {
    //        if (this.Contains(id))
    //        {
    //            return this[id].ToString();
    //        }
    //        else
    //        {
    //            return null;
    //        }
    //    }
    //}

    public class EnvOpenFlagCollection : KeyedCollection<string, EnvironmentOpenFlags>
    {
        protected override string GetKeyForItem(EnvironmentOpenFlags item)
        {
            return item.ToString();
        }

        public string GetGroupNameForId(string id)
        {
            if (this.Contains(id))
            {
                return this[id].ToString();
            }
            else
            {
                return null;
            }
        }
    }

    /// <remarks/>
    //[System.SerializableAttribute()]
    //[System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://myspace.com/EnvironmentConfig.xsd")]
    //public enum EnvironmentCreateFlags
    //{

    //    /// <remarks/>
    //    None,

    //    /// <remarks/>
    //    RpcClient,
    //}

    /// <remarks/>
    [System.FlagsAttribute()]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://myspace.com/EnvironmentConfig.xsd")]
    public enum EnvironmentOpenFlags
    {

        /// <remarks/>
        None = 1,

        /// <remarks/>
        JoinEnv = 2,

        /// <remarks/>
        InitCDB = 4,

        /// <remarks/>
        InitLock = 8,

        /// <remarks/>
        InitLog = 16,

        /// <remarks/>
        InitMPool = 32,

        /// <remarks/>
        InitRep = 64,

        /// <remarks/>
        InitTxn = 128,

        /// <remarks/>
        Recover = 256,

        /// <remarks/>
        RecoverFatal = 512,

        /// <remarks/>
        UseEnviron = 1024,

        /// <remarks/>
        UseEnvironRoot = 2048,

        /// <remarks/>
        Create = 4096,

        /// <remarks/>
        LockDown = 8192,

        /// <remarks/>
        Private = 16384,

        /// <remarks/>
        SystemMem = 32768,

        /// <remarks/>
        ThreadSafe = 65536,
    }

    //[System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://myspace.com/DatabaseConfigs.xsd")]
    public class DatabaseConfigs : KeyedCollection<int, DatabaseConfig>
    {
        protected override int GetKeyForItem(DatabaseConfig item)
        {
            return item.Id;
        }

        public DatabaseConfig GetConfigFor(int id)
        {
            if (this.Contains(id))
            {
                return this[id];
            }
            else
            {
                return null;
            }
        }
    }
}
